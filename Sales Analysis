# (1) How has the sales revenue and quantity sold trended over time?
final_df['orderdate'] = pd.to_datetime(final_df['orderdate'])
final_df['Revenue'] = pd.to_numeric(final_df['Revenue'])
final_df['order_quantity'] = pd.to_numeric(final_df['order_quantity'])

monthly_revenue = final_df.groupby(pd.Grouper(key='orderdate', freq='M'))['Revenue'].sum()
monthly_quantity = final_df.groupby(pd.Grouper(key='orderdate', freq='M'))['order_quantity'].sum()

fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(10, 8))

axes[0].plot(monthly_revenue.index, monthly_revenue.values, marker='o')
axes[0].set_xlabel('Time')
axes[0].set_ylabel('Sales Revenue')
axes[0].set_title('Trend in Sales Revenue over Time')

axes[1].plot(monthly_quantity.index, monthly_quantity.values, marker='o')
axes[1].set_xlabel('Time')
axes[1].set_ylabel('Quantity Sold')
axes[1].set_title('Trend in Quantity Sold over Time')

plt.tight_layout()
plt.show()


#(2) Which sales channel contributes the most to the overall revenue?
channel_sales = final_df.groupby('sales_channel')['order_quantity'].sum()
channel_sales = channel_sales.sort_values(ascending=False)

plt.bar(channel_sales.index, channel_sales.values)
plt.xlabel('Sales Channel')
plt.ylabel('Total Sales')
plt.title('Sales Performance by Channel')
plt.xticks(rotation=90)
plt.show()


#(3) Which products are the best sellers in terms of quantity and revenue?
product_quantity = final_df.groupby('product_name')['order_quantity'].sum()
product_revenue = final_df.groupby('product_name')['Revenue'].sum()

best_sellers_quantity = product_quantity.sort_values(ascending=False).head(5)
best_sellers_revenue = product_revenue.sort_values(ascending=False).head(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

axes[0].bar(best_sellers_quantity.index, best_sellers_quantity.values)
axes[0].set_title('Best-Selling Products by Quantity')
axes[0].set_xlabel('Product')
axes[0].set_ylabel('Quantity')

for i, value in enumerate(best_sellers_quantity.values):
    axes[0].text(i, value, str(value), ha='center', va='bottom')

axes[1].bar(best_sellers_revenue.index, best_sellers_revenue.values)
axes[1].set_title('Best-Selling Products by Revenue')
axes[1].set_xlabel('Product')
axes[1].set_ylabel('Revenue')

for i, value in enumerate(best_sellers_revenue.values):
    axes[1].text(i, value, str(value), ha='center', va='bottom')

plt.xticks(rotation=90)
plt.tight_layout()
plt.show()


#(4) Are there any products that consistently underperform in terms of quantity and revenue?
product_quantity = final_df.groupby('product_name')['order_quantity'].sum()
product_revenue = final_df.groupby('product_name')['Revenue'].sum()

best_sellers_quantity = product_quantity.sort_values(ascending=False).tail(5)
best_sellers_revenue = product_revenue.sort_values(ascending=False).tail(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

axes[0].bar(best_sellers_quantity.index, best_sellers_quantity.values)
axes[0].set_title('Underperforming Products by Quantity')
axes[0].set_xlabel('Product')
axes[0].set_ylabel('Quantity')

for i, value in enumerate(best_sellers_quantity.values):
    axes[0].text(i, value, str(value), ha='center', va='bottom')

axes[1].bar(best_sellers_revenue.index, best_sellers_revenue.values)
axes[1].set_title('Underperforming Products by Revenue')
axes[1].set_xlabel('Product')
axes[1].set_ylabel('Revenue')

for i, value in enumerate(best_sellers_revenue.values):
    axes[1].text(i, value, str(value), ha='center', va='bottom')

plt.xticks(rotation=90)
plt.tight_layout()
plt.show()


#(5) How does each salesperson contribute to the overall sales revenue?
sales_team_revenue = final_df.groupby('sales_team')['Revenue'].sum().reset_index()
sales_team_revenue_sorted = sales_team_revenue.sort_values('Revenue', ascending=False)

plt.figure(figsize=(12, 6))
plt.bar(sales_team_revenue_sorted['sales_team'], sales_team_revenue_sorted['Revenue'])
plt.title('Sales Revenue by Salesperson')
plt.xlabel('Sales Team')
plt.ylabel('Revenue')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


#(6) Which sales team has the highest conversion rate (order quantity to actual sales)?
sales_team_revenue = final_df.groupby('region')['Revenue'].sum()
sales_team_revenue = sales_team_revenue.sort_values(ascending=False)

plt.figure(figsize=(10, 6))
plt.bar(sales_team_revenue.index, sales_team_revenue.values)
plt.xlabel('Sales Team')
plt.ylabel('Revenue')
plt.title('Sales Team Revenue by Region')
plt.xticks(rotation=45)  # Rotate x-axis labels for readability

plt.show()


#(7) Are there any individual salespeople who consistently outperform others?
regions_of_interest = ['Midwest', 'West', 'Northeast', 'South']

fig, axes = plt.subplots(1, 4, figsize=(16, 6))

for i, region in enumerate(regions_of_interest):
    region_sales_data = final_df[final_df['region'] == region]

    sales_team_revenue = region_sales_data.groupby('sales_team')['Revenue'].sum().reset_index()

    sales_team_revenue_sorted = sales_team_revenue.sort_values('Revenue', ascending=False)

    axes[i].bar(sales_team_revenue_sorted['sales_team'], sales_team_revenue_sorted['Revenue'])
    axes[i].set_title('Sales Revenue by Sales Team in {}'.format(region))
    axes[i].set_xlabel('Sales Team')
    axes[i].set_ylabel('Revenue')
    axes[i].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()


#(8) Who are the top customers in terms of revenue and order quantity?
revenue_by_customer = final_df.groupby('customer_names')['Revenue'].sum().sort_values(ascending=False)
quantity_by_customer = final_df.groupby('customer_names')['order_quantity'].sum().sort_values(ascending=False)
top_customers_revenue = revenue_by_customer.head(5)
top_customers_quantity = quantity_by_customer.head(5)

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

axes[0].bar(top_customers_revenue.index, top_customers_revenue.values)
axes[0].set_title('Top Customers by Revenue')
axes[0].set_xlabel('Customer')
axes[0].set_ylabel('Revenue')

axes[1].bar(top_customers_quantity.index, top_customers_quantity.values)
axes[1].set_title('Top Customers by Order Quantity')
axes[1].set_xlabel('Customer')
axes[1].set_ylabel('Order Quantity')

plt.xticks(rotation=90)
plt.tight_layout()
plt.show()


#(9) Can you segment customers based on their purchasing behavior or demographics?
from sklearn.cluster import KMeans

features = ['order_quantity', 'Revenue', 'household_income']

product_data = final_df[features]

product_data = (product_data - product_data.mean()) / product_data.std()

inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(product_data)
    inertia.append(kmeans.inertia_)

plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Inertia')
plt.title('Elbow Curve')
plt.show()

num_clusters = 3

kmeans = KMeans(n_clusters=num_clusters, random_state=42)
kmeans.fit(product_data)

product_data['Cluster'] = kmeans.labels_

final_df = pd.concat([final_df, product_data['Cluster']], axis=1)

cluster_counts = final_df['Cluster'].value_counts()
print(cluster_counts)

# Calculate the average revenue and order quantity for each cluster
cluster_avg = final_df.groupby('Cluster')[['Revenue', 'order_quantity', 'household_income']].mean()

cluster_avg['order_quantity'] = cluster_avg['order_quantity'].round()

cluster_avg['Revenue'] = cluster_avg['Revenue'].round(2)

print(cluster_avg)


#(10) Are there any specific products or product categories that certain customer segments prefer?
final_df['Cluster'] = kmeans.labels_

final_df.reset_index(inplace=True, drop=True)

fig, axes = plt.subplots(1, 3, figsize=(15, 6))

for cluster_label, ax in zip(range(3), axes):

    cluster_products = final_df[final_df['Cluster'] == cluster_label]['product_name'].value_counts().head(5)

    ax.bar(cluster_products.index, cluster_products.values)
    ax.set_xlabel('Product Name')
    ax.set_ylabel('Count')
    ax.set_title(f'Top Products for Cluster {cluster_label}')
    ax.tick_params(axis='x', rotation=45)

plt.tight_layout()

plt.show()


#(11) How do discount and order quantity impact profit?
high_discount_threshold = 0.14
low_discount_threshold = 0.11

high_discount_products = final_df[final_df['discount_applied'] > high_discount_threshold]
low_discount_products = final_df[final_df['discount_applied'] < low_discount_threshold]

average_profit_high_discount = high_discount_products['Profit'].mean()
average_profit_low_discount = low_discount_products['Profit'].mean()

high_orderquantity_threshold = 5
low_orderquantity_threshold = 4

high_orderquantity_products = final_df[final_df['order_quantity'] >= high_orderquantity_threshold]
low_orderquantity_products = final_df[final_df['order_quantity'] <= low_orderquantity_threshold]

average_profit_high_orderquantity = high_orderquantity_products['Profit'].mean()
average_profit_low_orderquantity = low_orderquantity_products['Profit'].mean()

labels = ['High Discounts', 'Low Discounts', 'High Order Quantity', 'Low Order Quantity']
average_profits = [average_profit_high_discount, average_profit_low_discount,
                   average_profit_high_orderquantity, average_profit_low_orderquantity]

fig, ax = plt.subplots(1, 2, figsize=(10, 5))

ax[0].bar(labels[:2], average_profits[:2])
ax[0].set_xlabel('Discount Category')
ax[0].set_ylabel('Average Profit')
ax[0].set_title('Impact of Discounts on Profit')

ax[1].bar(labels[2:], average_profits[2:])
ax[1].set_xlabel('Order Quantity Category')
ax[1].set_ylabel('Average Profit')
ax[1].set_title('Impact of Order Quantity on Profit')

plt.tight_layout()
plt.show()


#(12) What's the relationship between order quantity, discount applied, unit price, unit cost, and profit margin?
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
final_df['unit_price1'] = scaler.fit_transform(final_df[['unit_price']])
final_df['unit_cost2'] = scaler.fit_transform(final_df[['unit_cost']])

import statsmodels.api as sm

X = final_df[['unit_price1','unit_cost2','order_quantity', 'discount_applied']]
X = sm.add_constant(X)  # Add a constant term for the intercept

y = final_df['Profit']

model = sm.OLS(y, X)
results = model.fit()

print(results.summary())


#(13) Are certain states or cities more profitable than others?
region_revenue = final_df.groupby('state')['Profit'].sum()
region_revenue = region_revenue.sort_values(ascending=False)

top5_regions = region_revenue.head(5)
bottom5_regions = region_revenue.tail(5)

fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

ax1.bar(top5_regions.index, top5_regions.values)
ax1.set_xlabel('States')
ax1.set_ylabel('Total Profit')
ax1.set_title('Top 5 States - Sales Revenue')
ax1.tick_params(axis='x', rotation=90)

ax2.bar(bottom5_regions.index, bottom5_regions.values)
ax2.set_xlabel('States')
ax2.set_ylabel('Total Profit')
ax2.set_title('Bottom 5 States - Sales Revenue')
ax2.tick_params(axis='x', rotation=90)

plt.tight_layout()
plt.show()


#(14) Can you identify any geographic areas with untapped sales potential?
final_df['Cluster'] = kmeans.labels_

final_df.reset_index(inplace=True, drop=True)

fig, axes = plt.subplots(1, 2, figsize=(15, 6))

cluster_cities = final_df[final_df['Cluster'] == 2]['city_name'].value_counts()

axes[0].bar(cluster_cities.index, cluster_cities.values)
axes[0].set_xlabel('City')
axes[0].set_ylabel('Count')
axes[0].set_title('Top Cities for Cluster 2')
axes[0].tick_params(axis='x', rotation=45)

cluster_states = final_df[final_df['Cluster'] == 2]['state'].value_counts()

axes[1].bar(cluster_states.index, cluster_states.values)
axes[1].set_xlabel('State')
axes[1].set_ylabel('Count')
axes[1].set_title('Top States for Cluster 2')
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()
